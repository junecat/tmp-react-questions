{"version":3,"sources":["containers/Quiz/Quiz.module.scss","components/ActiveQuiz/ActiveQuiz.module.scss","components/AnswersList/AnswerItem/AnswerItem.module.scss","components/FinishedQuiz/FinishedQuiz.module.scss","hoc/Layout/Layout.module.scss","components/AnswersList/AnswersList.module.scss","hoc/Layout/Layout.js","components/AnswersList/AnswerItem/AnswerItem.js","components/AnswersList/AnswersList.js","components/ActiveQuiz/ActiveQuiz.js","components/FinishedQuiz/FinishedQuiz.js","containers/Quiz/Quiz.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Layout","className","classes","this","props","children","Component","AnswerItem","cls","state","push","join","onClick","onAnswerClick","answer","id","text","AnswersList","answers","map","index","key","ActiveQuiz","Question","answerNumber","title","quizLenght","FinishedQuiz","successCount","Object","keys","results","reduce","total","quiz","quizItem","question","length","onRetry","Quiz","isFinished","answerState","activeQuestion","rightAnswerId","onAnswerClickHandler","answerId","setState","timeout","window","setTimeout","isQuizFinish","clearTimeout","retryHandler","QuizWrapper","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.0f307fbf.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Quiz\":\"Quiz_Quiz__3UnfT\",\"QuizWrapper\":\"Quiz_QuizWrapper__mjQPj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ActiveQuiz\":\"ActiveQuiz_ActiveQuiz__2KK1S\",\"Question\":\"ActiveQuiz_Question__1G1Hh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"AnswerItem\":\"AnswerItem_AnswerItem__2AkxX\",\"error\":\"AnswerItem_error__1dk5-\",\"success\":\"AnswerItem_success__7nSvj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"FinishedQuiz\":\"FinishedQuiz_FinishedQuiz__2GOTa\",\"error\":\"FinishedQuiz_error__3vLA6\",\"success\":\"FinishedQuiz_success__1YG3f\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Layout\":\"Layout_Layout__3l6Rh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"AnswersList\":\"AnswersList_AnswersList__y9_B4\"};","import React, {Component} from 'react'\r\nimport classes from './Layout.module.scss'\r\n\r\nclass Layout extends Component{\r\n\r\n\r\n    render(){\r\n        return(\r\n            <div className={classes.Layout}>\r\n\r\n                <main>\r\n                    {this.props.children}\r\n                </main>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Layout","import React from \"react\";\r\nimport classes from './AnswerItem.module.scss'\r\n\r\nconst AnswerItem = props =>{\r\n    const cls = [classes.AnswerItem]\r\n\r\n    if(props.state){\r\n        cls.push(classes[props.state])\r\n    }\r\n\r\n    return(\r\n        <li\r\n            className={cls.join(' ')}\r\n            onClick = {()=> props.onAnswerClick(props.answer.id)}\r\n        >\r\n            {props.answer.text}\r\n        </li>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default AnswerItem","import React from \"react\";\r\nimport classes from './AnswersList.module.scss'\r\nimport AnswerItem from \"./AnswerItem/AnswerItem\";\r\n\r\nconst AnswersList = props =>(\r\n    <ul className={classes.AnswersList}>\r\n        {props.answers.map((answer, index)=>{\r\n            return(\r\n                <AnswerItem\r\n                    key={index}\r\n                    answer={answer}\r\n                    onAnswerClick = {props.onAnswerClick}\r\n                    state={props.state ? props.state[answer.id] : null}\r\n                />\r\n            )\r\n        })}\r\n    </ul>\r\n)\r\n\r\nexport default AnswersList","import React from 'react'\r\nimport classes from './ActiveQuiz.module.scss'\r\nimport AnswersList from \"../AnswersList/AnswersList\";\r\n\r\nconst ActiveQuiz = props =>(\r\n    <div className={classes.ActiveQuiz}>\r\n        <p className={classes.Question}>\r\n            <span>\r\n                <strong>{props.answerNumber}.</strong>&nbsp;\r\n                {props.title}\r\n            </span>\r\n            <small>{props.answerNumber} из {props.quizLenght}</small>\r\n        </p>\r\n      <AnswersList\r\n          answers = {props.answers}\r\n          onAnswerClick = {props.onAnswerClick}\r\n          state = {props.state}\r\n      />\r\n    </div>\r\n)\r\n\r\nexport default ActiveQuiz","import React from \"react\";\r\nimport classes from './FinishedQuiz.module.scss'\r\n\r\nconst FinishedQuiz = props => {\r\n    const successCount = Object.keys(props.results).reduce((total, key)=>{\r\n        if(props.results[key] === 'success'){\r\n            total++\r\n        }\r\n        return total\r\n    },0)\r\n    return(\r\n        <div className={classes.FinishedQuiz}>\r\n            <ul>\r\n                {props.quiz.map((quizItem, index)=>{\r\n                    const cls = [\r\n                        'fa',\r\n                        props.results[quizItem.id] === 'error' ? 'fa-times' : 'fa-check',\r\n                        classes[props.results[quizItem.id]]\r\n                    ]\r\n                    return(\r\n                        <li\r\n                            key={index}\r\n                        >\r\n                            <strong>{index +1}</strong>. &nbsp;\r\n                            <span>{quizItem.question}</span>\r\n                            <i className={cls.join(' ')}/>\r\n                        </li>\r\n                    )\r\n                })}\r\n            </ul>\r\n            <p>{successCount} из {props.quiz.length}</p>\r\n            <div>\r\n                <button onClick={props.onRetry}>Повторить</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default FinishedQuiz","import React, { Component } from 'react'\r\nimport classes from './Quiz.module.scss'\r\nimport ActiveQuiz from \"../../components/ActiveQuiz/ActiveQuiz\";\r\nimport FinishedQuiz from \"../../components/FinishedQuiz/FinishedQuiz\";\r\n\r\nclass Quiz extends Component{\r\n    state={\r\n        results:{},\r\n        isFinished: false,\r\n        answerState: null,\r\n        activeQuestion: 0,\r\n        quiz:[\r\n            {\r\n                question: 'Сколько лап у кошки?',\r\n                rightAnswerId: 3,\r\n                id:1,\r\n                answers:[\r\n                    {text: '3', id:1},\r\n                    {text: '8', id:2},\r\n                    {text: '4', id:3},\r\n                    {text: '11', id:4}\r\n                    ]\r\n            },\r\n            {\r\n                question: 'Основатель компании Apple?',\r\n                rightAnswerId: 2,\r\n                id:2,\r\n                answers:[\r\n                    {text: 'Канеки Кен', id:1},\r\n                    {text: 'Стив Джопс', id:2},\r\n                    {text: 'Тим Кок', id:3},\r\n                    {text: 'Илон Маск', id:4}\r\n                ]\r\n            }\r\n        ]\r\n    }\r\n    onAnswerClickHandler = (answerId)=>{\r\n        if(this.state.answerState){\r\n            const key = Object.keys(this.state.answerState)[0]\r\n            if (this.state.answerState[key]==='success'){\r\n                return\r\n            }\r\n        }\r\n        const results = this.state.results\r\n        const question= this.state.quiz[this.state.activeQuestion]\r\n\r\n        if(question.rightAnswerId === answerId){\r\n            if(!results[question.id]){\r\n                results[question.id] = 'success'\r\n            }\r\n            this.setState({\r\n                answerState: {[answerId]: 'success'},\r\n                results\r\n            })\r\n            const timeout = window.setTimeout(()=>{\r\n                if(this.isQuizFinish()){\r\n                    this.setState({\r\n                        isFinished: !this.state.isFinished\r\n                    })\r\n                } else {\r\n                    this.setState({\r\n                        activeQuestion: this.state.activeQuestion + 1,\r\n                        answerState: null\r\n                    })\r\n\r\n                }\r\n                window.clearTimeout(timeout)\r\n            },700)\r\n        } else {\r\n            results[question.id] = 'error'\r\n              this.setState({\r\n                answerState: {[answerId]: 'error'},\r\n                results\r\n            })\r\n        }\r\n    }\r\n    isQuizFinish(){\r\n        return this.state.activeQuestion +1 === this.state.quiz.length\r\n    }\r\n    retryHandler = ()=>{\r\n        this.setState({\r\n            activeQuestion: 0,\r\n            answerState: null,\r\n            isFinished: false,\r\n            results: {}\r\n        })\r\n    }\r\n    render(){\r\n        return(\r\n            <div className={classes.Quiz}>\r\n                <div className={classes.QuizWrapper}>\r\n                    <h1>Ответьте на все вопросы</h1>\r\n                    {\r\n                        this.state.isFinished\r\n                        ?   <FinishedQuiz\r\n                                results = {this.state.results}\r\n                                quiz={ this.state.quiz}\r\n                                onRetry = {this.retryHandler}\r\n                            />\r\n\r\n                        : <ActiveQuiz\r\n                                answers={this.state.quiz[this.state.activeQuestion].answers}\r\n                                title={this.state.quiz[this.state.activeQuestion].question}\r\n                                onAnswerClick = {this.onAnswerClickHandler}\r\n                                quizLenght = {this.state.quiz.length}\r\n                                answerNumber = {this.state.activeQuestion + 1}\r\n                                state = {this.state.answerState}\r\n                          />\r\n                    }\r\n\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Quiz","import React, {Component} from 'react';\nimport Layout from './hoc/Layout/Layout'\nimport Quiz from './containers/Quiz/Quiz'\n\nclass App extends Component {\n\n  render(){\n    return (\n      <Layout>\n         <Quiz/>\n      </Layout>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}